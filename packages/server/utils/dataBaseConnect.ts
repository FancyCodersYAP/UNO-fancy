import * as path from 'path';
import { type SequelizeOptions, Sequelize } from 'sequelize-typescript';
import { User } from '../models/User';

const {
  POSTGRES_USER,
  POSTGRES_PASSWORD,
  POSTGRES_DB,
  POSTGRES_HOST,
  POSTGRES_PORT,
} = process.env;

export const initPostgresDBConnection = async (): Promise<
  Sequelize | undefined
> => {
  let client;

  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Postgre
    const sequelizeOptions: SequelizeOptions = {
      host: POSTGRES_HOST || 'localhost',
      port: Number(POSTGRES_PORT),
      username: POSTGRES_USER,
      password: POSTGRES_PASSWORD,
      database: POSTGRES_DB,
      dialect: 'postgres',
      logging: false,
    };

    client = new Sequelize(sequelizeOptions);

    /** –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ */
    const modelsPath = path.join(__dirname, '../models');
    client.addModels([modelsPath]);

    //TODO —É–±—Ä–∞—Ç—å alter –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ (–ø—Ä–∏ –¥–µ–ø–ª–æ–µ)
    const synced = await client.sync({ alter: true });

    if (synced) {
      console.log('  ‚ûú üé∏ Synchronized the Postgres database');
      // // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞, –±–µ–∑ —ç—Ç–æ–≥–æ –Ω–µ –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–º–∏–∑–∞—Ü–∏—è.
      // await Themes.bulkCreate([{ theme_name: 'DARK' }, { theme_name: 'LIGHT' }], { ignoreDuplicates: true });
      //
      // // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–æ—Ä—É–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
      // await ForumSection.bulkCreate([{ name: '–ù–æ–≤–æ—Å—Ç–∏' }, { name: '–ò–≥—Ä–∞' }, { name: '–ë–∞–≥–∏' }, { name: '–§–ª—É–¥' }], {
      //   ignoreDuplicates: true,
      // });
      await User.bulkCreate(
        [
          {
            ya_id: 11111,
            login: 'test_login1',
            display_name: 'test_name1',
            avatar: '/test_avatar1',
          },
          {
            ya_id: 22223,
            login: 'test_login2',
            display_name: 'test_name2',
            avatar: '/test_avatar2',
          },
        ],
        {
          ignoreDuplicates: true,
        }
      );
    } else {
      console.log('Sync error');
    }

    console.log('  ‚ûú üé∏ Connected to the Postgres database');
  } catch (e) {
    console.error(e);
  }

  return client;
};
